pravo-docker
==============


**[pravo](https//:pravo.rg.ru)** в контейнерах Nginx, PHP-FPM, Composer, MySQL and PHPMyAdmin.

Цель проекта 
-----------
обеспечить простое развертывание многокомпонентного [pravo](https//:pravo.rg.ru)
на локальном компьютере  для изменения и отладки backend и frontend кода.

Локальный компьютер не требует установки никаких программ кроме **docker**.

---

## Обзор

Спасибо https://github.com/nanoninja/docker-nginx-php-mysql,
Проект модифицирован с целями:
1. поддержки Symfony со стороны NGINX, 
2. автоматического развертывания базы данных MySQL из дампа, 
3. автоматической загрузки компонет PHP composer.
4. поддержки удаленной отладки XDebug в Visual Studio Code.
5. поддержки Redis

 
#### Используемые контейнеры

* [Nginx](https://hub.docker.com/_/nginx/)
* [MySQL](https://hub.docker.com/_/mysql/)
* [PHP-FPM](https://hub.docker.com/r/nanoninja/php-fpm/)
* [Composer](https://hub.docker.com/_/composer/)
* [PHPMyAdmin](https://hub.docker.com/r/phpmyadmin/phpmyadmin/)
* [Generate Certificate](https://hub.docker.com/r/jacoelho/generate-certificate/)
* [Redis](https://hub.docker.com/_/redis/)


#### Порты :

| Server     | Port |
|------------|------|
| MySQL      | 8989 |
| PHPMyAdmin | 8080 |
| Nginx      | 3030 |
| Nginx SSL  | 3000 |
| Redis      | 6379 | 


<!-- 
### TOC


6. [Установить необходимое ПО](#Установить-необходимое-ПО)
7. [Клонировать проект](#клонировать-проект)
8. [Сконфигурировать Nginx с SSL сертификатами](#Сконфигурировать-Nginx-SSL-сертификатами) [`необязательно`]
9. [Сконфигурировать Xdebug](#) [`необязательно`]
10. [Запустить приложение](#)
11. [Дополнительные команды Docker](#) -->
___

## Установить необходимое ПО

Для запуска приложения на локальном компьютере не требуется никакого программного обеспечения кроме:

* [Git](https://git-scm.com/downloads)
* [Docker](https://docs.docker.com/engine/installation/)
* [Docker Compose](https://docs.docker.com/compose/install/)
  
Убедитесь что эти приложения правильно установлены и работают.
Для Windows возможно потребуется установить 
[Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10), 
поскольку проект создавался и тестировался под Linux/MacOS. 



## Клонировать проект

Клонируйте проект :

```sh
git clone git@git.rg.ru:ivlev/pravo-docker.git
```

Перейдите в папку:

```sh
cd pravo-docker
```



##### Дерево проекта

```sh

├── data
│   └── db
│       └── dumps
│           └── pravo-dump.sql   
│       
│
├── etc
│   ├── nginx
│   │   ├── default.conf            # Не менять. Копируется из default.template.conf
│   │   └── default.template.conf   # Настройки NGINX.  
│   ├── php
│   │   └── php.ini                 # настройки Xdebug
│   └── ssl
│
├── web
│   └── pravo                 # папка с кодом приложения
│
├── .env                            # Основной файл настроек
├── docker-compose.yml
└── README.md

```


___

## Запустите приложение


1. Запустите приложение :

    ```sh
    sudo docker-compose up -d
    ```
    Ключ `d` запускает приложение в фоновом режиме. 
    Можно запустить без него, чтобы видеть, что происходит. 


    **Это может занять некоторое время ...**


    ```sh
    sudo docker-compose logs -f # Посмотреть логи с обновлением
    ```

    

2. Откройте браузер :

    * [http://localhost:3030](http://localhost:3030/)
    * [http://localhost:8080](http://localhost:8080/) PHPMyAdmin (username: root, password: root)

Если PHP выдает сообщение об **ошибке** связанной с **правами доступа** выполните команду:

```sh
sudo chmod -R 777 web/pravo/web/var/
``` 


3. Останов и удаление сервисов

    ```sh
    sudo docker-compose down -v
    ```





#### Заметки

После запуска сервисы остаются запущенными и после перезагрузки компьютера.

Для временной остановки

```sh
docker-compose stop
```

Пуск временно остановленных сервисов

```sh
docker-compose start
```



___________________________________-___

## Порядок работы программистов

1. После запуска сервисов измените, отладьте и оттестируйте код.

2. Внесите изменения репозиторий:
    ```sh
    git pull
    git add -A .
    git commit -m "..."
    git push
    ```



_________________________________________

# Дополнительные возможности

## Oтладка PHP.



Документация об  [удаленной отладке Xdebug](https://xdebug.org/docs/remote). 
[Интеграция PHPStorm с docker](https://github.com/nanoninja/docker-nginx-php-mysql/blob/master/doc/phpstorm-macosx.md).

1. Узнайте свой локальный IP :

    ```sh
    sudo ifconfig | grep 'inet 192'
    ```

2. Отредактируйте `etc/php/php.ini`. Установите параметр
 `remote_host` в значение своего IP :

    ```sh
    xdebug.remote_host=192.168.0.1 # your IP
    ```
3. Перезапустите сервисы
   ```sh
   docker-compose restart
   ```

## Nginx с SSL сертификатами

Вы можете изменить имя хоста в `.env` файле.

Не забудьте добавить его имя в файл `/etc/hosts`.

1. Генерация SSL сертификатов 

    ```sh
    source .env && sudo docker run --rm -v $(pwd)/etc/ssl:/certificates -e "SERVER=$NGINX_HOST" jacoelho/generate-certificate
    ```

2. Конфигурация Nginx

    Не меняйте `etc/nginx/default.conf`, он перезаписывается файлом  `etc/nginx/default.template.conf`

    Редактируйте `etc/nginx/default.template.conf`.  Для поддержки SSL добавьте секцию :

    ```sh
    # server {
    #     server_name ${NGINX_HOST};
    #
    #     listen 443 ssl;
    #     fastcgi_param HTTPS on;
    #     ...
    # }
    ```

________________________________________

## Использование команд Docker 

### Установка пакетов  composer

```sh
sudo docker run --rm -v $(pwd)/web/pravo/www:/app composer require symfony/yaml
```

### Обновление PHP зависимостей  composer

```sh
sudo docker run --rm -v $(pwd)/web/pravo/www:/app composer update
```

### Генерация PHP API документации

```sh
sudo docker-compose exec -T php php -d memory_limit=256M -d xdebug.profiler_enable=0 ./app/vendor/bin/apigen generate app/src --destination ./app/doc
```

### Тестирование PHP приложения с  PHPUnit

```sh
sudo docker-compose exec -T php ./app/vendor/bin/phpunit --colors=always --configuration ./app
```

### Fixing standard code with [PSR2](http://www.php-fig.org/psr/psr-2/)

```sh
sudo docker-compose exec -T php ./app/vendor/bin/phpcbf -v --standard=PSR2 ./app/src
```

### Checking the standard code with [PSR2](http://www.php-fig.org/psr/psr-2/)

```sh
sudo docker-compose exec -T php ./app/vendor/bin/phpcs -v --standard=PSR2 ./app/src
```

### Analyzing source code with [PHP Mess Detector](https://phpmd.org/)

```sh
sudo docker-compose exec -T php ./app/vendor/bin/phpmd ./app/src text cleancode,codesize,controversial,design,naming,unusedcode
```

### Проверка установленных PHP расширений

```sh
sudo docker-compose exec php php -m
```

### База данных

#### Доступ к MySQL shell 

```sh
sudo docker exec -it mysql bash
```

и

```sh
mysql -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD"
```

#### Бэкап всех баз данных

```sh
mkdir -p data/db/dumps
```

```sh
source .env && sudo docker exec $(sudo docker-compose ps -q mysqldb) mysqldump --all-databases -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD" > "data/db/dumps/db.sql"
```

#### Восстановление баз данных из бэкапа

```sh
source .env && sudo docker exec -i $(sudo docker-compose ps -q mysqldb) mysql -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD" < "data/db/dumps/db.sql"
```

#### Бэкап одной базы данных

**`Заметка:`** Замените "YOUR_DB_NAME" правильным именем.

```sh
source .env && sudo docker exec $(sudo docker-compose ps -q mysqldb) mysqldump -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD" --databases YOUR_DB_NAME > "data/db/dumps/YOUR_DB_NAME_dump.sql"
```

#### Восстановление одной базы данных из бэкапа

```sh
source .env && sudo docker exec -i $(sudo docker-compose ps -q mysqldb) mysql -u"$MYSQL_ROOT_USER" -p"$MYSQL_ROOT_PASSWORD" < "data/db/dumps/pravo-dump.sql"
```


#### Соединение с  MySQL из [PDO](http://php.net/manual/en/book.pdo.php)

```php
<?php
    try {
        $dsn = 'mysql:host=mysqldb;dbname=test;charset=utf8;port=3306';
        $pdo = new PDO($dsn, 'dev', 'dev');
    } catch (PDOException $e) {
        echo $e->getMessage();
    }
?>
```

_________________________________________

## Использование Makefile

Во время разработки вы можете пользоваться [Makefile](https://en.wikipedia.org/wiki/Make_(software)) для следующих операций :

| Name          | Description                                  |
|---------------|----------------------------------------------|
| apidoc        | Generate documentation of API                |
| clean         | Clean directories for reset                  |
| code-sniff    | Check the API with PHP Code Sniffer (`PSR2`) |
| composer-up   | Update PHP dependencies with composer        |
| docker-start  | Create and start containers                  |
| docker-stop   | Stop and clear all services                  |
| gen-certs     | Generate SSL certificates for `nginx`        |
| logs          | Follow log output                            |
| mysql-dump    | Create backup of all databases               |
| mysql-restore | Restore backup of all databases              |
| phpmd         | Analyse the API with PHP Mess Detector       |
| test          | Test application with phpunit                |

### Examples

Start the application :

```sh
sudo make docker-start
```

Show help :

```sh
make help
```

